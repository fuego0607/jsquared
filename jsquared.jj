/* JavaCC input file for a simple imperative language. */
/* JSquared by Jose Angulo and Jeremy Hofer */
PARSER_BEGIN(JSquared)

import java.io.*;
import java.util.HashMap;

class UninitializedVariableError extends Exception {
    public UninitializedVariableError(String message) {
        super(message);
    }
}

class JSquared {

	public static HashMap<String, Integer> variables = new HashMap<String, Integer>();
	public static void main(String[] args) throws ParseException, TokenMgrError, AssertionError, UninitializedVariableError{
		if (args.length > 0) {
			try {
				JSquared scan = new JSquared(new FileInputStream(args[0]));
				Node tree = scan.Program();
				run_program(tree);
			} catch (FileNotFoundException ex) {
				System.out.println("File "+args[0]+" not found.");
			}
		} else {
			System.out.println("Must specify source code file name.");
		}
	}

	public static void run_program(Node node) throws AssertionError, UninitializedVariableError{
		String label = node.getLabel();
		if(label.equals("PROGRAM") || label.equals("BLOCK")) {
			for(Node child: node.children) {
				run_program(child);
			}
		} else if (label.equals("LOGIC_EXP") || label.equals("MATH_EXP")) {
			int value = evaluate(node);
			System.out.println(value);
		} else if(label.equals("ASSIGN") || label.equals("INPUT") || label.equals("OUTPUT") || label.equals("WHILE") || label.equals("COND")) {
			execute(node);
		} else {
			throw new AssertionError("Invalid program.");
		}
	}

	public static int evaluate(Node n) throws AssertionError, UninitializedVariableError{
		int value = 0;
		Integer temp = null;
		String operation = null;
		System.out.println(n);
		for(Node child: n.children) {
			System.out.println(child);
			//check to see if operation is null. should always have some operation present unless we are in the left most node/subtree
			if(child.label.equals("INT")) {
				temp = new Integer(child.getValue());
			} else if(child.label.equals("ID")) {
				Integer t = variables.get(child.getID());

				if(t == null) {
					throw new UninitializedVariableError(child.getID()+" was not initialized before use");
				} else {
					temp = t;
				}
			} else if(child.label.equals("LOGIC_EXP") || child.label.equals("MATH_EXP") || child.label.equals("MATH_TERM")) {
				temp = new Integer(evaluate(child));
			} else if(child.label.equals("LESS") || child.label.equals("GREAT") || child.label.equals("LESSEQ") || child.label.equals("GREATEQ") || child.label.equals("NOTEQ") ||
					child.label.equals("EQ") || child.label.equals("ADD") || child.label.equals("SUB") || child.label.equals("MUL") || child.label.equals("DIV") ||
					child.label.equals("MOD")) {

					operation = child.label;
					continue;
			} else {
				throw new AssertionError("Invalid expression.");
			}

			if(operation == null && temp != null) {
				value = temp.intValue();
			} else if(operation != null && temp != null) {
				value = perform_op(value, operation, temp);	
			} else {
				throw new AssertionError("Invalid expression.");
			}

			temp = null;
		}

		return value;
	}

	public static int perform_op(int a, String op, int b) {
		int result = 0;

		if(op.equals("LESS")) {
			result = (a < b) ? 1 : 0;
		} else if(op.equals("GREAT")) {
			result = (a > b) ? 1 : 0;
		} else if(op.equals("LESSEQ")) {
			result = (a <= b) ? 1 : 0;
		} else if(op.equals("GREATEQ")) {
			result = (a >= b) ? 1 : 0;
		} else if(op.equals("NOTEQ")) {
			result = (a != b) ? 1 : 0;
		} else if(op.equals("EQ")) {
			result = (a == b) ? 1 : 0;
		} else if(op.equals("ADD")) {
			result = a + b;
		} else if(op.equals("SUB")) {
			result = a - b;
		} else if(op.equals("MUL")) {
			result = a * b;
		} else if(op.equals("DIV")) {
			result = a / b;
		} else if(op.equals("MOD")) {
			result = a % b;
		}

		return result;
	}

	public static void execute(Node n) throws AssertionError, UninitializedVariableError{
		if(n.label.equals("ASSIGN")) {
			int output = evaluate(n.children.get(1));
			System.out.println(output);
		} else
			System.out.println("Will execute node");
	}
}

PARSER_END(JSquared)

SKIP : { " " | "\t" | "\n" }
TOKEN : { <COMMENT : "//"(["a"-"z", "A"-"Z","0"-"9","_"," ","<",">","!","=","/","%","@","#",":","(",")","*",",","."])* >}
TOKEN : { <LPAREN : "("> }
TOKEN : { <RPAREN : ")"> }
TOKEN : { <DBLSTAR : "**"> }
TOKEN : { <SGLSTAR : "*"> }
TOKEN : { <INPUT : "<<" >}
TOKEN : { <OUTPUT : ">>" >}
TOKEN : { <ASSIGN : ":" > }
TOKEN : { <ADD : "+" > }
TOKEN : { <SUB : "-" > }
TOKEN : { <DIV : "/" > }
TOKEN : { <MOD : "%" > }
TOKEN : { <LESSEQ : "<=" > }
TOKEN : { <GREATEQ : ">=" > }
TOKEN : { <LESS : "<" > }
TOKEN : { <GREAT : ">" > }
TOKEN : { <NOTEQ : "!=" > }
TOKEN : { <EQ : "==" > }
TOKEN : { <INT : "0" | ["1"-"9"](["0"-"9"])* > }
TOKEN : { <ID : ["a"-"z", "A"-"Z"](["a"-"z", "A"-"Z","0"-"9","_"])* > }

void PrintTokens():
{
	Token t;
}
{
	(
		<LPAREN>  { System.out.println("LPAREN"); }
		|
		<RPAREN>  { System.out.println("RPAREN"); }
		|
		<DBLSTAR>  { System.out.println("DBLSTAR"); }
		|
		<SGLSTAR>  { System.out.println("SGLSTAR"); }
		|
		<INPUT>  { System.out.println("INPUT"); }
		|
		<OUTPUT>  { System.out.println("OUTPUT"); }
		|
		<ASSIGN>  { System.out.println("ASSIGN"); }
		|
		<ADD>  { System.out.println("ADD"); }
		|
		<SUB>  { System.out.println("SUB"); }
		|
		<DIV>  { System.out.println("DIV"); }
		|
		<MOD>  { System.out.println("MOD"); }
		|
		<LESSEQ>  { System.out.println("LESSEQ"); }
		|
		<GREATEQ>  { System.out.println("GREATEQ"); }
		|
		<LESS>  { System.out.println("LESS"); }
		|
		<GREAT>  { System.out.println("GREAT"); }
		|
		<NOTEQ>  { System.out.println("NOTEQ"); }
		|
		<EQ>  { System.out.println("EQ"); }
		|
		t = <INT>  { System.out.println("INT("+t.image+")"); }
		|
		t = <ID>   { System.out.println("ID("+t.image+")"); }
		|
		t = <COMMENT> { System.out.println("COMMENT("+t.image+")"); }
	)+
}

Node Program():
{
	Node n;
	Node child;
}
{
	{n = new Node("PROGRAM");}
	(
		child = Block() {n.addChild(child);}
	)+
	{return n;}
}

Node Base_Stmt():
{
	Node n;
}
{
	(
		n = Input()
		|
		n = Output()
		|
		n = Assign()
		|
		n = Cond()
		|
		n = While()
	)
	{return n;}
}

Node Input():
{
	Node n;
	Node child;
	Token t;
}
{
	<INPUT> {n = new Node("INPUT");}
	t = <ID> {n.addChild(new IDNode(t.image));}
	{return n;}
}

Node Output():
{
	Node n;
	Node child;
}
{
	<OUTPUT> {n = new Node("OUTPUT");}
	child = Logic_Exp() {n.addChild(child);}
	{return n;}
}

Node Assign():
{
	Node n;
	Node child;
	Token t;
}
{
	t = <ID> {child = new IDNode(t.image);}
	<ASSIGN> {n = new Node("ASSIGN"); n.addChild(child);}
	child = Logic_Exp() {n.addChild(child);}
	{return n;}
}

Node Cond():
{
	Node n;
	Node child;
}
{
	<SGLSTAR> {n = new Node("COND");}
	<LPAREN>
	child = Logic_Exp() {n.addChild(child);}
	<RPAREN>
	child = Block() {n.addChild(child);}
	(
		child = Block() {n.addChild(child);}
	)?
	{return n;}
}

Node While():
{
	Node n; //root of tree
	Node child; //
}
{
	<DBLSTAR> {n = new Node("WHILE");}
	<LPAREN>
	child = Logic_Exp() {n.addChild(child);}
	<RPAREN>
	child = Block() {n.addChild(child);}
	{return n;}
}

Node Block():
{
	Node n;
	Node child;
}
{
	<LPAREN> {n = new Node("BLOCK");}
	(
		child = Base_Stmt() {n.addChild(child);}
		|
		(
			<LPAREN>
			child = Base_Stmt() {n.addChild(child);}
			<RPAREN>
		)*
	)
	<RPAREN>
	{return n;}
}

Node Logic_Exp():
{
	Node n;
	Node child;
}
{
	child = Math_Exp() {n = new Node("LOGIC_EXP"); n.addChild(child);}
	(
		(
			<LESS> {child = new Node("LESS");}
			|
			<GREAT> {child = new Node("GREAT");}
			|
			<LESSEQ> {child = new Node("LESSEQ");}
			|
			<GREATEQ> {child = new Node("GREATEQ");}
			|
			<NOTEQ> {child = new Node("NOTEQ");}
			|
			<EQ> {child = new Node("EQ");}
		) 
		{n.addChild(child);}
		child = Math_Exp() {n.addChild(child);}
	)?
	{return n;}
}

Node Math_Exp():
{
	Node n;
	Node child;
}
{
	child = Math_Term() {n = new Node("MATH_EXP"); n.addChild(child);}
	(
		(
			<ADD> {child = new Node("ADD");}
			|
			<SUB> {child = new Node("SUB");}
		)
		{n.addChild(child);}
		child = Math_Term() {n.addChild(child);}
	)*
	{return n;}
}

Node Math_Term():
{
	Node n;
	Node child;
}
{
	child = Math_Factor() {n = new Node("MATH_TERM"); n.addChild(child);}
	(
		(
			<SGLSTAR> {child = new Node("MUL");}
			|
			<DIV> {child = new Node("DIV");}
			|
			<MOD> {child = new Node("MOD");}
		)
		{n.addChild(child);}
		child = Math_Factor() {n.addChild(child);}
	)*
	{return n;}
}

Node Math_Factor():
{
	Node n;
	Token t;
}
{
	(
		t = <ID> {n = new IDNode(t.image);}
		|
		t = <INT> {n = new INTNode(t.image);}
		|
		<LPAREN>
		n = Math_Exp()
		<RPAREN>
	)
	{return n;}
}